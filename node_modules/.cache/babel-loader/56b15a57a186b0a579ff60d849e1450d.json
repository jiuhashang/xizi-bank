{"remainingRequest":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ylf\\Desktop\\xizi - bank\\src\\components\\GlobalComponents\\CustomTable\\GeneralColumn.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\src\\components\\GlobalComponents\\CustomTable\\GeneralColumn.vue","mtime":1642644134571},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\babel.config.js","mtime":1642644134550},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668673146435},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\babel-loader\\lib\\index.js","mtime":1668673148088},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668673146435},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\vue-loader\\lib\\index.js","mtime":1668673148087}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICAvKioNCiAgICAgKiBAYXJndW1lbnQge09iamVjdH0gY29sdW1uOiDooajmoLzmr4/liJfnmoTphY3nva7lsZ7mgKfpm4blkIgo5LiL5YiX5rOo6YeK5pyr5bC+5bimKCop55qE5Li66Ieq5a6a5LmJ6YWN572u6aG5LOWFtuS7luWImeaYr2VsLXRhYmxl55qE5Y6f5aeL6YWN572u6aG5LOWFtuacieaViOWAvOWPr+ebtOaOpeWPguiAg+WumOaWueaWh+ahoykNCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW58U3RyaW5nfSBmaXhlZDog5YiX5piv5ZCm5Zu65a6a5Zyo5bem5L6n5oiW6ICF5Y+z5L6n77yMdHJ1ZSDooajnpLrlm7rlrprlnKjlt6bkvqcodHJ1ZS8nbGVmdCcvJ3JpZ2h0JykNCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNob3dPdmVyZmxvd1Rvb2x0aXA6IOW9k+WGheWuuei/h+mVv+iiq+makOiXj+aXtuaYvuekuiB0b29sdGlwDQogICAgICogQHBhcmFtIHtTdHJpbmd9IGFsaWduOiDlr7npvZDmlrnlvI8oJ2xlZnQnLydjZW50ZXInLydyaWdodCcpDQogICAgICogQHBhcmFtIHtvYmplY3R8RnVuY3Rpb259IGZpbHRlcjog6Ieq5a6a5LmJ5YiX5pWw5o2u6L+H5ruk5ZmoLOWPr+S7peebtOaOpei1i+WAvOS4uui/h+a7pOaWueazlShmdW5jdGlvbiks5Lmf5Y+v5Lul6K6+572u5Li65LiA5Liq5ZCr5pyJbWV0aG9k5ZKMYXJnc+S4pOS4quWxnuaAp+eahE9iamVjdOOAgmZpbHRlci5tZXRob2Q66L+H5ruk5pa55rOVKEZ1bmN0aW9uKTsgZmlsdGVyLmFyZ3M66L+H5ruk5pa55rOV5omA6ZyA55qE6aKd5aSW5Y+C5pWwKOW+hei/h+a7pOeahOWAvOS4jemcgOimgeWcqGFyZ3PkuK3lo7DmmI4s6L+H5ruk5pa55rOV5Lya5bCG5YW25L2c5Li66buY6K6k5Y+C5pWwKSgqKQ0KICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2hvdzog5pys5YiX5pWw5o2u55qE5pi+56S654q25oCBKHRydWU6IOaYvuekuiwgZmFsc2U6IOmakOiXjykoKikNCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZW1wdHlDZWxsOiDmnKzliJfnqbrljZXlhYPmoLznmoTljaDkvY3mlofmnKwo5YWB6K645YaZ5YWl5a2X56ym5Liy5b2i5byP55qEaHRtbOS7o+eggSzmnKzphY3nva7pobnnmoTmnYPph43opoHpq5jkuo7ooajmoLzkuK3phY3nva7nmoRlbXB0eUNlbGwpKCopDQogICAgICovCiAgICBjb2x1bW46IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0KCkgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfSwKICAgIC8vIOe7hOS7tmtleQogICAgaW5kZXg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAwCiAgICB9LAogICAgLy8g6KGo5qC85Y2V5YWD5qC85YaF5a655Li656m65pe25pi+56S655qE5Y2g5L2N5paH5pysKOWFgeiuuOWGmeWFpeWtl+espuS4suW9ouW8j+eahGh0bWzku6PnoIEpCiAgICBlbXB0eUNlbGw6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnLScKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICAvLyDmnKzliJfmlbDmja7nmoTmmL7npLrnirbmgIEodHJ1ZTog5pi+56S6LCBmYWxzZTog6ZqQ6JePKQogICAgc2hvdygpIHsKICAgICAgcmV0dXJuIHRoaXMuY29sdW1uLnNob3cgPT09IHVuZGVmaW5lZCA/IHRydWUgOiB0aGlzLmNvbHVtbi5zaG93OwogICAgfSwKICAgIC8vIOWIl+aYr+WQpuWbuuWumuWcqOW3puS+p+aIluiAheWPs+S+p++8jHRydWUg6KGo56S65Zu65a6a5Zyo5bem5L6nKHRydWUsIGxlZnQsIHJpZ2h0KQogICAgZml4ZWQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5maXhlZCB8fCBmYWxzZTsKICAgIH0sCiAgICAvLyDlr7npvZDmlrnlvI8obGVmdC9jZW50ZXIvcmlnaHQpCiAgICBhbGlnbigpIHsKICAgICAgcmV0dXJuIHRoaXMuY29sdW1uLmFsaWduIHx8ICdjZW50ZXInOwogICAgfSwKICAgIC8vIOiHquWumuS5iei/h+a7pOWZqAogICAgZmlsdGVyKCkgewogICAgICByZXR1cm4gKHZhbHVlLCBhcmdzKSA9PiB7CiAgICAgICAgLy8g5bCd6K+V5omn6KGMdGhpcy5jb2x1bW7kuK1maWx0ZXLlsZ7mgKfnmoRtZXRob2QKICAgICAgICB0cnkgewogICAgICAgICAgLy8g6IulZmlsdGVy5bGe5oCn5Lit55qEYXJnc+S4uuaVsOe7hOW9ouW8j+eahOWkmuS4quWPguaVsAogICAgICAgICAgaWYgKGFyZ3MgJiYgQXJyYXkuaXNBcnJheShhcmdzKSkgewogICAgICAgICAgICAvLyDlsIZhcmdz5bGV5byA5ZCO5YaN5Lyg5YWl6L+H5ruk5pa55rOVCiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5maWx0ZXIubWV0aG9kKHZhbHVlLCAuLi5hcmdzKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5maWx0ZXIubWV0aG9kKHZhbHVlLCBhcmdzKTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgLy8g6IulZmlsdGVy5bGe5oCn5rKh5pyJ5aOw5piObWV0aG9kLOWImeebtOaOpeaJp+ihjGZpbHRlcuWxnuaApyzor6Xmg4XlhrXkuIvkuI3lrZjlnKhhcmdz77yI5L6L5aaCe3Byb3A6eHgsIGxhYmVsOnh4LCBmaWx0ZXI6IHthcmdzOnh4eH195piv5peg5pWI55qE6K6+572u77yJCiAgICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4uZmlsdGVyKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9LAogICAgLy8g5pmu6YCa5pWw5o2u5YiX55qE5pi+56S654q25oCBCiAgICBzaG93R2VuZXJhbENvbHVtbigpIHsKICAgICAgLy8g5b2T5YmN5YiX55qE5pi+56S654q25oCB6KKr6K6+572u5Li6ZmFsc2UKICAgICAgaWYgKCF0aGlzLnNob3cpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgLy8g54m55q6K5pWw5o2u5YiXCiAgICAgIGNvbnN0IHNwZWNpYWxDb2x1bW5zID0gWydzZWxlY3Rpb24nXTsKICAgICAgaWYgKHNwZWNpYWxDb2x1bW5zLnNvbWUodiA9PiB7CiAgICAgICAgcmV0dXJuIHYgPT09IHRoaXMuY29sdW1uLnR5cGU7CiAgICAgIH0pKSB7CiAgICAgICAgLy8g5b2T5YmN5pWw5o2u5YiX57G75Z6L5piv54m55q6K57G75Z6L5pe25LiN5pi+56S65pmu6YCa5pWw5o2u5YiXCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLy8g5a+55aSa5bGC55qEcHJvcOi/m+ihjOWkhOeQhgogICAgZ2V0VmFsdWUoX2tleSwgcHJvcCkgewogICAgICBpZiAocHJvcCkgewogICAgICAgIGNvbnN0IGFyciA9IHByb3Auc3BsaXQoJy4nKTsKICAgICAgICBpZiAoYXJyLmxlbmd0aCA+IDEpIHsKICAgICAgICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICBfa2V5ID0gZ2V0VmFsKF9rZXksIGl0ZW0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBfa2V5W3Byb3BdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gX2tleTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJyc7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZ2V0VmFsKGEsIGIpIHsKICAgICAgICByZXR1cm4gYVtiXSB8fCAnJzsKICAgICAgfQogICAgfSwKICAgIC8vIOWkhOeQhuWbvueJh+S4iuS8oOWIl+eahOS4iuS8oOe7k+aenAogICAgY2hhbmdlKGUsIHJvdywgcHJvcCkgewogICAgICAvLyDlsIblm77niYfkuIrkvKDnmoTnu5Pmnpwo5Zu+54mH5Zyw5Z2AKei1i+WAvOe7meihjOaVsOaNruS4reWvueW6lOeahOWxnuaApwogICAgICAvLyBjb25zb2xlLmxvZyhlLCByb3csIHByb3ApCiAgICAgIHJvd1twcm9wXSA9IGVbMF07CiAgICB9LAogICAgLy8g5Y2V5YWD5qC85YaF55qE6L6T5YWl5qGG5aSx5Y6754Sm54K55pe26Kem5Y+RCiAgICBoYW5kbGVDZWxsRWRpdChlLCByb3csIGNvbHVtbikgewogICAgICAvLyBjb25zb2xlLmxvZyhlLnRhcmdldC52YWx1ZSwgcm93LCBjb2x1bW4pCiAgICAgIHRoaXMuJGVtaXQoJ2NlbGxJbnB1dEJsdXInLCB7CiAgICAgICAgZSwKICAgICAgICByb3csCiAgICAgICAgY29sdW1uCiAgICAgIH0pOwogICAgfSwKICAgIC8vIOW9k+WJjeihjOaVsOaNruS4uuWLvumAieeKtuaAgeeahOaXtuWAme+8jOemgeeUqOS/ruaUueS7t+agvOeahGlucHV06L6T5YWl5qGGKOS5n+WwseaYr2Nsb3Vtbi5wcm9wID09PSAncHJpY2UnKQogICAgZGlzYWJsZWRJbnB1dChyb3csIHByb3ApIHsKICAgICAgLy8gY29uc29sZS5sb2cocm93LCBwcm9wKQogICAgICBpZiAocHJvcCA9PT0gJ3ByaWNlJykgewogICAgICAgIC8vIGNoZWNrZWTkvZzkuLrmtLvliqjllYblk4Ei5Yu+6YCJ54q25oCBIuWtl+autSgwOuacquWLvumAiSwxOuW3suWLvumAiSkKICAgICAgICBpZiAocm93LmNoZWNrZWQgPT09IDApIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Ow=="},{"version":3,"mappings":"AA0EA;EACAA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC;MACAC;MACAC;QACA;MACA;IACA;IAEA;IACAC;MACAF;MACAC;IACA;IAEA;IACAE;MACAH;MACAC;IACA;EACA;EACAG;IACA;IACAC;MACA;IACA;IAEA;IACAC;MACA;IACA;IAEA;IACAC;MACA;IACA;IAEA;IACAC;MACA;QACA;QACA;UACA;UACA;YACA;YACA;UACA;YACA;UACA;QACA;UACA;UACA;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA;QACA;MACA;MACA;MACA;MACA;QACA;MACA;QACA;QACA;MACA;MACA;IACA;EACA;EACAC;IACA;IACAC;MACA;QACA;QACA;UACAC;YACAC;UACA;QACA;UACA;QACA;QACA;MACA;QACA;MACA;MACA;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA;MACAC;IACA;IAEA;IACAC;MACA;MACA;QAAAC;QAAAF;QAAAhB;MAAA;IACA;IAEA;IACAmB;MACA;MACA;QACA;QACA;UACA;QACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["props","column","type","default","index","emptyCell","computed","show","fixed","align","filter","showGeneralColumn","methods","getValue","arr","_key","change","row","handleCellEdit","e","disabledInput"],"sourceRoot":"src/components/GlobalComponents/CustomTable","sources":["GeneralColumn.vue"],"sourcesContent":["<template>\r\n  <!-- 普通数据列 -->\r\n  <el-table-column\r\n    v-if=\"showGeneralColumn\"\r\n    :prop=\"column.prop\"\r\n    :label=\"column.label\"\r\n    :width=\"column.width\"\r\n    :sortable=\"column.sortable\"\r\n    :show-overflow-tooltip=\"column.showOverflowTooltip\"\r\n    :fixed=\"fixed\"\r\n    :align=\"align\"\r\n    :formatter=\"column.formatter\"\r\n    :type=\"column.type\"\r\n    class=\"columns\"\r\n  >\r\n    <template slot-scope=\"scope\">\r\n      <!-- 如果非空单元格(内容数据不为undefined,null,''等,内容为0的情况不算)配置了filter,则显示该部分内容 -->\r\n      <span v-if=\"(Boolean(getValue(scope.row,column.prop)) || typeof(getValue(scope.row,column.prop)) === 'number' || typeof (getValue(scope.row,column.prop)) === 'boolean') && column.filter\">\r\n        {{ filter(getValue(scope.row,column.prop), column.filter.args) }}\r\n      </span>\r\n\r\n      <!-- column的type设置为upload时,单元格内显示图片上传组件 -->\r\n      <!-- fileList 接受的数据是Array,所以赋值时先判断getValue(scope.row,column.prop)是否有值，如果有值设置为数组-->\r\n      <image-upload\r\n        v-else-if=\"column.type === 'upload'\"\r\n        :key=\"scope.row.id\"\r\n        :file-list=\"getValue(scope.row,column.prop) ? [getValue(scope.row,column.prop)] : getValue(scope.row,column.prop)\"\r\n        width=\"60px\"\r\n        height=\"60px\"\r\n        margin=\"0px\"\r\n        @change=\"change($event, scope.row, column.prop)\"\r\n      />\r\n\r\n      <!-- column的type设置为edit时,单元格内显示输入框 -->\r\n      <el-input\r\n        v-else-if=\"column.type === 'edit'\"\r\n        v-model=\"scope.row[column.prop]\"\r\n        :disabled=\"disabledInput(scope.row, column.prop)\"\r\n        @blur=\"handleCellEdit($event,scope.row, scope.column)\"\r\n      />\r\n\r\n      <!-- column的type设置为image时,单元格内显示图片 -->\r\n      <el-image\r\n        v-else-if=\"column.type === 'image'\"\r\n        :src=\"getValue(scope.row,column.prop)\"\r\n        :preview-src-list=\"[getValue(scope.row,column.prop)]\"\r\n        class=\"image-cell\"\r\n        alt=\"暂无图片...\"\r\n      />\r\n\r\n      <!-- 没有对column配置filter的,列类型也不是'upload'的,则展示原始数据 -->\r\n      <span v-else>{{ getValue(scope.row,column.prop) }}</span>\r\n\r\n      <!-- 全表空单元格占位内容(单元格内容为数字0时不视为空单元格);表格配置项（绑定在table上的配置属性）中声明了emptyCell内容,则显示该部分内容 -->\r\n      <span\r\n        v-show=\"(!Boolean(getValue(scope.row,column.prop)) && typeof(getValue(scope.row,column.prop)) !== 'number' && typeof(getValue(scope.row,column.prop)) !== 'boolean') && emptyCell && !column.emptyCell\"\r\n        v-html=\"emptyCell\"\r\n      >\r\n        {{ emptyCell }}\r\n      </span>\r\n\r\n      <!-- 单列空单元格占位内容(单元格内容为数字0时不视为空单元格);column配置项(下面props里面传入的)中声明了emptyCell内容,则显示该部分内容 -->\r\n      <span\r\n        v-show=\"(!Boolean(getValue(scope.row,column.prop)) && typeof(getValue(scope.row,column.prop)) !== 'number' && typeof(getValue(scope.row,column.prop)) !== 'boolean') && column.emptyCell\"\r\n        v-html=\"column.emptyCell\"\r\n      >\r\n        {{ column.emptyCell }}\r\n      </span>\r\n\r\n    </template>\r\n  </el-table-column>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    /**\r\n     * @argument {Object} column: 表格每列的配置属性集合(下列注释末尾带(*)的为自定义配置项,其他则是el-table的原始配置项,其有效值可直接参考官方文档)\r\n     * @param {Boolean|String} fixed: 列是否固定在左侧或者右侧，true 表示固定在左侧(true/'left'/'right')\r\n     * @param {Boolean} showOverflowTooltip: 当内容过长被隐藏时显示 tooltip\r\n     * @param {String} align: 对齐方式('left'/'center'/'right')\r\n     * @param {object|Function} filter: 自定义列数据过滤器,可以直接赋值为过滤方法(function),也可以设置为一个含有method和args两个属性的Object。filter.method:过滤方法(Function); filter.args:过滤方法所需的额外参数(待过滤的值不需要在args中声明,过滤方法会将其作为默认参数)(*)\r\n     * @param {Boolean} show: 本列数据的显示状态(true: 显示, false: 隐藏)(*)\r\n     * @param {String} emptyCell: 本列空单元格的占位文本(允许写入字符串形式的html代码,本配置项的权重要高于表格中配置的emptyCell)(*)\r\n     */\r\n    column: {\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n\r\n    // 组件key\r\n    index: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n\r\n    // 表格单元格内容为空时显示的占位文本(允许写入字符串形式的html代码)\r\n    emptyCell: {\r\n      type: String,\r\n      default: '-'\r\n    }\r\n  },\r\n  computed: {\r\n    // 本列数据的显示状态(true: 显示, false: 隐藏)\r\n    show() {\r\n      return this.column.show === undefined ? true : this.column.show\r\n    },\r\n\r\n    // 列是否固定在左侧或者右侧，true 表示固定在左侧(true, left, right)\r\n    fixed() {\r\n      return this.column.fixed || false\r\n    },\r\n\r\n    // 对齐方式(left/center/right)\r\n    align() {\r\n      return this.column.align || 'center'\r\n    },\r\n\r\n    // 自定义过滤器\r\n    filter() {\r\n      return (value, args) => {\r\n        // 尝试执行this.column中filter属性的method\r\n        try {\r\n          // 若filter属性中的args为数组形式的多个参数\r\n          if (args && Array.isArray(args)) {\r\n            // 将args展开后再传入过滤方法\r\n            return this.column.filter.method(value, ...args)\r\n          } else {\r\n            return this.column.filter.method(value, args)\r\n          }\r\n        } catch (error) {\r\n          // 若filter属性没有声明method,则直接执行filter属性,该情况下不存在args（例如{prop:xx, label:xx, filter: {args:xxx}}是无效的设置）\r\n          return this.column.filter(value)\r\n        }\r\n      }\r\n    },\r\n\r\n    // 普通数据列的显示状态\r\n    showGeneralColumn() {\r\n      // 当前列的显示状态被设置为false\r\n      if (!this.show) {\r\n        return false\r\n      }\r\n      // 特殊数据列\r\n      const specialColumns = ['selection']\r\n      if (specialColumns.some(v => {\r\n        return v === this.column.type\r\n      })) {\r\n        // 当前数据列类型是特殊类型时不显示普通数据列\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n  },\r\n  methods: {\r\n    // 对多层的prop进行处理\r\n    getValue(_key, prop) {\r\n      if (prop) {\r\n        const arr = prop.split('.')\r\n        if (arr.length > 1) {\r\n          arr.forEach(item => {\r\n            _key = getVal(_key, item)\r\n          })\r\n        } else {\r\n          return _key[prop]\r\n        }\r\n        return _key\r\n      } else {\r\n        return ''\r\n      }\r\n      function getVal(a, b) {\r\n        return a[b] || ''\r\n      }\r\n    },\r\n\r\n    // 处理图片上传列的上传结果\r\n    change(e, row, prop) {\r\n      // 将图片上传的结果(图片地址)赋值给行数据中对应的属性\r\n      // console.log(e, row, prop)\r\n      row[prop] = e[0]\r\n    },\r\n\r\n    // 单元格内的输入框失去焦点时触发\r\n    handleCellEdit(e, row, column) {\r\n      // console.log(e.target.value, row, column)\r\n      this.$emit('cellInputBlur', { e, row, column })\r\n    },\r\n\r\n    // 当前行数据为勾选状态的时候，禁用修改价格的input输入框(也就是cloumn.prop === 'price')\r\n    disabledInput(row, prop) {\r\n      // console.log(row, prop)\r\n      if (prop === 'price') {\r\n        // checked作为活动商品\"勾选状态\"字段(0:未勾选,1:已勾选)\r\n        if (row.checked === 0) {\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.image-cell {\r\n  width: 60px;\r\n  height: 60px;\r\n  color: #cccccc;\r\n}\r\n</style>\r\n"]}]}