{"remainingRequest":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ylf\\Desktop\\xizi - bank\\src\\components\\GlobalComponents\\CustomTable\\GeneralColumn.vue?vue&type=style&index=0&id=8e9f23b4&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\src\\components\\GlobalComponents\\CustomTable\\GeneralColumn.vue","mtime":1642644134571},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\css-loader\\dist\\cjs.js","mtime":1668673146952},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1668673148673},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\postcss-loader\\src\\index.js","mtime":1668673147587},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1668673148073},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668673146435},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\vue-loader\\lib\\index.js","mtime":1668673148087}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouaW1hZ2UtY2VsbCB7DQogIHdpZHRoOiA2MHB4Ow0KICBoZWlnaHQ6IDYwcHg7DQogIGNvbG9yOiAjY2NjY2NjOw0KfQ0K"},{"version":3,"sources":["GeneralColumn.vue"],"names":[],"mappings":";AA+MA;AACA;AACA;AACA;AACA","file":"GeneralColumn.vue","sourceRoot":"src/components/GlobalComponents/CustomTable","sourcesContent":["<template>\r\n  <!-- 普通数据列 -->\r\n  <el-table-column\r\n    v-if=\"showGeneralColumn\"\r\n    :prop=\"column.prop\"\r\n    :label=\"column.label\"\r\n    :width=\"column.width\"\r\n    :sortable=\"column.sortable\"\r\n    :show-overflow-tooltip=\"column.showOverflowTooltip\"\r\n    :fixed=\"fixed\"\r\n    :align=\"align\"\r\n    :formatter=\"column.formatter\"\r\n    :type=\"column.type\"\r\n    class=\"columns\"\r\n  >\r\n    <template slot-scope=\"scope\">\r\n      <!-- 如果非空单元格(内容数据不为undefined,null,''等,内容为0的情况不算)配置了filter,则显示该部分内容 -->\r\n      <span v-if=\"(Boolean(getValue(scope.row,column.prop)) || typeof(getValue(scope.row,column.prop)) === 'number' || typeof (getValue(scope.row,column.prop)) === 'boolean') && column.filter\">\r\n        {{ filter(getValue(scope.row,column.prop), column.filter.args) }}\r\n      </span>\r\n\r\n      <!-- column的type设置为upload时,单元格内显示图片上传组件 -->\r\n      <!-- fileList 接受的数据是Array,所以赋值时先判断getValue(scope.row,column.prop)是否有值，如果有值设置为数组-->\r\n      <image-upload\r\n        v-else-if=\"column.type === 'upload'\"\r\n        :key=\"scope.row.id\"\r\n        :file-list=\"getValue(scope.row,column.prop) ? [getValue(scope.row,column.prop)] : getValue(scope.row,column.prop)\"\r\n        width=\"60px\"\r\n        height=\"60px\"\r\n        margin=\"0px\"\r\n        @change=\"change($event, scope.row, column.prop)\"\r\n      />\r\n\r\n      <!-- column的type设置为edit时,单元格内显示输入框 -->\r\n      <el-input\r\n        v-else-if=\"column.type === 'edit'\"\r\n        v-model=\"scope.row[column.prop]\"\r\n        :disabled=\"disabledInput(scope.row, column.prop)\"\r\n        @blur=\"handleCellEdit($event,scope.row, scope.column)\"\r\n      />\r\n\r\n      <!-- column的type设置为image时,单元格内显示图片 -->\r\n      <el-image\r\n        v-else-if=\"column.type === 'image'\"\r\n        :src=\"getValue(scope.row,column.prop)\"\r\n        :preview-src-list=\"[getValue(scope.row,column.prop)]\"\r\n        class=\"image-cell\"\r\n        alt=\"暂无图片...\"\r\n      />\r\n\r\n      <!-- 没有对column配置filter的,列类型也不是'upload'的,则展示原始数据 -->\r\n      <span v-else>{{ getValue(scope.row,column.prop) }}</span>\r\n\r\n      <!-- 全表空单元格占位内容(单元格内容为数字0时不视为空单元格);表格配置项（绑定在table上的配置属性）中声明了emptyCell内容,则显示该部分内容 -->\r\n      <span\r\n        v-show=\"(!Boolean(getValue(scope.row,column.prop)) && typeof(getValue(scope.row,column.prop)) !== 'number' && typeof(getValue(scope.row,column.prop)) !== 'boolean') && emptyCell && !column.emptyCell\"\r\n        v-html=\"emptyCell\"\r\n      >\r\n        {{ emptyCell }}\r\n      </span>\r\n\r\n      <!-- 单列空单元格占位内容(单元格内容为数字0时不视为空单元格);column配置项(下面props里面传入的)中声明了emptyCell内容,则显示该部分内容 -->\r\n      <span\r\n        v-show=\"(!Boolean(getValue(scope.row,column.prop)) && typeof(getValue(scope.row,column.prop)) !== 'number' && typeof(getValue(scope.row,column.prop)) !== 'boolean') && column.emptyCell\"\r\n        v-html=\"column.emptyCell\"\r\n      >\r\n        {{ column.emptyCell }}\r\n      </span>\r\n\r\n    </template>\r\n  </el-table-column>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    /**\r\n     * @argument {Object} column: 表格每列的配置属性集合(下列注释末尾带(*)的为自定义配置项,其他则是el-table的原始配置项,其有效值可直接参考官方文档)\r\n     * @param {Boolean|String} fixed: 列是否固定在左侧或者右侧，true 表示固定在左侧(true/'left'/'right')\r\n     * @param {Boolean} showOverflowTooltip: 当内容过长被隐藏时显示 tooltip\r\n     * @param {String} align: 对齐方式('left'/'center'/'right')\r\n     * @param {object|Function} filter: 自定义列数据过滤器,可以直接赋值为过滤方法(function),也可以设置为一个含有method和args两个属性的Object。filter.method:过滤方法(Function); filter.args:过滤方法所需的额外参数(待过滤的值不需要在args中声明,过滤方法会将其作为默认参数)(*)\r\n     * @param {Boolean} show: 本列数据的显示状态(true: 显示, false: 隐藏)(*)\r\n     * @param {String} emptyCell: 本列空单元格的占位文本(允许写入字符串形式的html代码,本配置项的权重要高于表格中配置的emptyCell)(*)\r\n     */\r\n    column: {\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n\r\n    // 组件key\r\n    index: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n\r\n    // 表格单元格内容为空时显示的占位文本(允许写入字符串形式的html代码)\r\n    emptyCell: {\r\n      type: String,\r\n      default: '-'\r\n    }\r\n  },\r\n  computed: {\r\n    // 本列数据的显示状态(true: 显示, false: 隐藏)\r\n    show() {\r\n      return this.column.show === undefined ? true : this.column.show\r\n    },\r\n\r\n    // 列是否固定在左侧或者右侧，true 表示固定在左侧(true, left, right)\r\n    fixed() {\r\n      return this.column.fixed || false\r\n    },\r\n\r\n    // 对齐方式(left/center/right)\r\n    align() {\r\n      return this.column.align || 'center'\r\n    },\r\n\r\n    // 自定义过滤器\r\n    filter() {\r\n      return (value, args) => {\r\n        // 尝试执行this.column中filter属性的method\r\n        try {\r\n          // 若filter属性中的args为数组形式的多个参数\r\n          if (args && Array.isArray(args)) {\r\n            // 将args展开后再传入过滤方法\r\n            return this.column.filter.method(value, ...args)\r\n          } else {\r\n            return this.column.filter.method(value, args)\r\n          }\r\n        } catch (error) {\r\n          // 若filter属性没有声明method,则直接执行filter属性,该情况下不存在args（例如{prop:xx, label:xx, filter: {args:xxx}}是无效的设置）\r\n          return this.column.filter(value)\r\n        }\r\n      }\r\n    },\r\n\r\n    // 普通数据列的显示状态\r\n    showGeneralColumn() {\r\n      // 当前列的显示状态被设置为false\r\n      if (!this.show) {\r\n        return false\r\n      }\r\n      // 特殊数据列\r\n      const specialColumns = ['selection']\r\n      if (specialColumns.some(v => {\r\n        return v === this.column.type\r\n      })) {\r\n        // 当前数据列类型是特殊类型时不显示普通数据列\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n  },\r\n  methods: {\r\n    // 对多层的prop进行处理\r\n    getValue(_key, prop) {\r\n      if (prop) {\r\n        const arr = prop.split('.')\r\n        if (arr.length > 1) {\r\n          arr.forEach(item => {\r\n            _key = getVal(_key, item)\r\n          })\r\n        } else {\r\n          return _key[prop]\r\n        }\r\n        return _key\r\n      } else {\r\n        return ''\r\n      }\r\n      function getVal(a, b) {\r\n        return a[b] || ''\r\n      }\r\n    },\r\n\r\n    // 处理图片上传列的上传结果\r\n    change(e, row, prop) {\r\n      // 将图片上传的结果(图片地址)赋值给行数据中对应的属性\r\n      // console.log(e, row, prop)\r\n      row[prop] = e[0]\r\n    },\r\n\r\n    // 单元格内的输入框失去焦点时触发\r\n    handleCellEdit(e, row, column) {\r\n      // console.log(e.target.value, row, column)\r\n      this.$emit('cellInputBlur', { e, row, column })\r\n    },\r\n\r\n    // 当前行数据为勾选状态的时候，禁用修改价格的input输入框(也就是cloumn.prop === 'price')\r\n    disabledInput(row, prop) {\r\n      // console.log(row, prop)\r\n      if (prop === 'price') {\r\n        // checked作为活动商品\"勾选状态\"字段(0:未勾选,1:已勾选)\r\n        if (row.checked === 0) {\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.image-cell {\r\n  width: 60px;\r\n  height: 60px;\r\n  color: #cccccc;\r\n}\r\n</style>\r\n"]}]}