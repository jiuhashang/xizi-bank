{"remainingRequest":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ylf\\Desktop\\xizi - bank\\src\\components\\GlobalComponents\\ImageUpload\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\src\\components\\GlobalComponents\\ImageUpload\\index.vue","mtime":1642644134574},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668673146435},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\babel-loader\\lib\\index.js","mtime":1668673148088},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668673146435},{"path":"C:\\Users\\ylf\\Desktop\\xizi - bank\\node_modules\\vue-loader\\lib\\index.js","mtime":1668673148087}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgeyBnZXRUb2tlbiB9IGZyb20gJ0AvdXRpbHMvYXV0aCcNCmltcG9ydCBudGggZnJvbSAnbG9kYXNoL250aCcNCmltcG9ydCBzcGxpdCBmcm9tICdsb2Rhc2gvc3BsaXQnDQppbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnZWxlbWVudC11aScNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBwcm9wczogew0KICAgIC8vIOWbvueJh+S4iuS8oOeahOaOpeWPo+WcsOWdgA0KICAgIGFjdGlvbjogew0KICAgICAgdHlwZTogU3RyaW5nLA0KICAgICAgZGVmYXVsdDogcHJvY2Vzcy5lbnYuVlVFX0FQUF9CQVNFX0FQSSArICcvaHVhd2VpL3VwbG9hZEZpbGUnDQogICAgfSwNCiAgICAvLyDnu4Tku7bmmK/lkKblj6/nvJbovpENCiAgICBkaXNhYmxlZDogew0KICAgICAgdHlwZTogQm9vbGVhbiwNCiAgICAgIGRlZmF1bHQ6IGZhbHNlDQogICAgfSwNCg0KICAgIC8vIOe7hOS7tuaYr+WQpuaUr+aMgeWkmumAieS4iuS8oCjpu5jorqTkuI3mlK/mjIEpDQogICAgbXVsdGlwbGU6IHsNCiAgICAgIHR5cGU6IEJvb2xlYW4sDQogICAgICBkZWZhdWx0OiBmYWxzZQ0KICAgIH0sDQoNCiAgICAvLyDkuIrkvKDlm77niYfnmoTmlbDph4/pmZDliLYNCiAgICBsaW1pdDogew0KICAgICAgdHlwZTogTnVtYmVyLA0KICAgICAgZGVmYXVsdDogMQ0KICAgIH0sDQoNCiAgICAvLyDlhYHorrjkuIrkvKDnmoTmlofku7bnsbvlnosNCiAgICBhY2NlcHQ6IHsNCiAgICAgIHR5cGU6IFN0cmluZywNCiAgICAgIGRlZmF1bHQ6ICcuanBnLC5wbmcsLmpwZWcnDQogICAgfSwNCg0KICAgIC8vIOS4iuS8oOaMiemSrueahOWuveW6pg0KICAgIHdpZHRoOiB7DQogICAgICB0eXBlOiBTdHJpbmcsDQogICAgICBkZWZhdWx0OiAnMTAwcHgnDQogICAgfSwNCg0KICAgIC8vIOS4iuS8oOaMiemSrueahOmrmOW6pg0KICAgIGhlaWdodDogew0KICAgICAgdHlwZTogU3RyaW5nLA0KICAgICAgZGVmYXVsdDogJzEwMHB4Jw0KICAgIH0sDQoNCiAgICAvLyDmlofku7bnvKnnlaXlm77liJfooago6K+l5pWw57uE55qE5q+P5LiA6aG55Y+q6IO95piv5a2X56ym5Liy5oiW6ICF5a+56LGhKQ0KICAgIGZpbGVMaXN0OiB7DQogICAgICB0eXBlOiBbQXJyYXksIFN0cmluZ10sDQogICAgICBkZWZhdWx0KCkgew0KICAgICAgICByZXR1cm4gW10NCiAgICAgIH0NCiAgICB9LA0KDQogICAgLy8g5aaC5p6cZmlsZUxpc3TmnInmlbDnu4TpobnmmK/lr7nosaHliJnmjIflrprlr7nosaHnmoTkuIDkuKrlsZ7mgKfkvZzkuLrmlofku7blr7nosaF1cmzlsZ7mgKflgLwo6buY6K6k5piv6K+l5a+56LGh55qEdXJs5bGe5oCn6KGo56S65paH5Lu26Lev5b6EKQ0KICAgIGZpbGVLZXk6IHsNCiAgICAgIHR5cGU6IFN0cmluZywNCiAgICAgIGRlZmF1bHQ6ICd1cmwnDQogICAgfSwNCg0KICAgIC8vIOe7hOS7tuavj+W8oOWbvueJh+eahG1hcmdpbuWAvA0KICAgIG1hcmdpbjogew0KICAgICAgdHlwZTogU3RyaW5nLA0KICAgICAgZGVmYXVsdDogJzBweCA4cHggOHB4IDBweCcNCiAgICB9LA0KDQogICAgc2hvd0ZpbGVMaXN0OiB7DQogICAgICB0eXBlOiBCb29sZWFuLA0KICAgICAgZGVmYXVsdDogdHJ1ZQ0KICAgIH0sDQoNCiAgICAvLyDkuIrkvKDpop3lpJbluKbnmoTlj4LmlbANCiAgICBkYXRhOiB7DQogICAgICB0eXBlOiBPYmplY3QsDQogICAgICBkZWZhdWx0KCkgew0KICAgICAgICByZXR1cm4gew0KICAgICAgICAgICdwcmlGaXgnOiAnYWRtaW5JbWFnZScNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgYmFzZVVybDogcHJvY2Vzcy5lbnYuVlVFX0FQUF9JTUFHRV9VUkwsDQogICAgICBoZWFkZXJzOiB7DQogICAgICAgICd0b2tlbic6IGdldFRva2VuKCkNCiAgICAgIH0sIC8vIOS4iuS8oOeahOivt+axguWktOmDqA0KICAgICAgZGlhbG9nSW1hZ2VVcmw6ICcnLCAvLyDlvZPliY3mn6XnnIvlm77niYfnmoTot6/lvoQNCiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLCAvLyDlm77niYfmn6XnnIvmoYbnmoTmmL7npLrnirbmgIENCiAgICAgIGN1cnJlbnRMaXN0OiBbXSAvLyDlt7LkuIrkvKDnmoTmlofku7YNCiAgICB9DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgLy8g6K6h566X57uE5Lu26ZyA6KaB5bGV56S655qE5paH5Lu257yp55Wl5Zu+5YiX6KGo5pWw5o2uDQogICAgZmlsZXMoKSB7DQogICAgICAvLyDnvKnnlaXlm77liJfooagNCiAgICAgIGNvbnN0IGZpbGVzID0gW10NCg0KICAgICAgLy8g5aaC5p6c54i257uE5Lu25rKh5pyJ5Lyg5YWl57yp55Wl5Zu+5YiX6KGo5pWw5o2uDQogICAgICBpZiAodGhpcy5maWxlTGlzdC5sZW5ndGggPT09IDApIHsNCiAgICAgICAgcmV0dXJuIFtdDQogICAgICB9DQoNCiAgICAgIC8vIOWmguaenOeItue7hOS7tuayoeacieS8oOWFpee8qeeVpeWbvuWIl+ihqOaVsOaNrg0KICAgICAgaWYgKHR5cGVvZiAodGhpcy5maWxlTGlzdCkgPT09ICdzdHJpbmcnICYmIHRoaXMuZmlsZUxpc3QgPT09ICcnKSB7DQogICAgICAgIHJldHVybiBbXQ0KICAgICAgfQ0KDQogICAgICAvLyDoi6XniLbnu4Tku7bkvKDlhaXkuobkuIDkuKrlrZfnrKbkuLLkvZzkuLrnvKnnlaXlm77liJfooajnmoTmmL7npLrmlbDmja4NCiAgICAgIGlmICh0eXBlb2YgKHRoaXMuZmlsZUxpc3QpID09PSAnc3RyaW5nJykgew0KICAgICAgICAvLyDliKTmlq3or6XlrZfnrKbkuLLmmK/lkKbmmK/nlLHlpJrlvKDlm77niYfnmoTlnLDlnYDmi7zmjqXogIzmiJANCiAgICAgICAgaWYgKHRoaXMuZmlsZUxpc3QuaW5jbHVkZXMoJywnKSkgew0KICAgICAgICAgIGNvbnN0IGZpbGVMaXN0ID0gdGhpcy5maWxlTGlzdC5zcGxpdCgnLCcpDQogICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVMaXN0KSB7DQogICAgICAgICAgICBmaWxlcy5wdXNoKHRoaXMucGF0aFRvRmlsZShmaWxlKSkNCiAgICAgICAgICB9DQogICAgICAgICAgcmV0dXJuIGZpbGVzDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgLy8g5bCG5YW25L2c5Li65pWw57uE6aG55Yqg5YWl5pWw57uE5bm255u05o6l6L+U5Zue57uT5p6cDQogICAgICAgICAgZmlsZXMucHVzaCh0aGlzLnBhdGhUb0ZpbGUodGhpcy5maWxlTGlzdCkpDQogICAgICAgICAgcmV0dXJuIGZpbGVzDQogICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgLy8g6Iul54i257uE5Lu25Lyg5YWl57yp55Wl5Zu+5YiX6KGo55qE5pi+56S65pWw5o2u5piv5LiA5Liq5pWw57uEDQogICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuZmlsZUxpc3QpIHsNCiAgICAgICAgLy8g5Yik5pat5Lyg5YWl55qE5pWw57uE5q+P5LiA6aG55piv5ZCm5piv5LiA5Liq5a2X56ym5LiyDQogICAgICAgIGlmICh0eXBlb2YgKGl0ZW0pID09PSAnc3RyaW5nJykgew0KICAgICAgICAgIC8vIOWwhuWtl+espuS4sui9rOaIkOaVsOe7hCjlpITnkIYv5Y2V5Liq5pWw57uE6aG5L+S4uuWkmuW8oOWbvueJh+eahOWcsOWdgOaLvOaOpSzlubbku6XpgJflj7fliIbpmpTnmoTlrZfnrKbkuLIv55qE5oOF5Ya1KQ0KICAgICAgICAgIGl0ZW0gPSBpdGVtLnNwbGl0KCcsJykNCiAgICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgaXRlbSkgew0KICAgICAgICAgICAgZmlsZXMucHVzaCh0aGlzLnBhdGhUb0ZpbGUoZmlsZSkpDQogICAgICAgICAgfQ0KICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiAoaXRlbSkgPT09ICdvYmplY3QnKSB7DQogICAgICAgICAgLy8g5aaC5p6c5pWw57uE55qE5q+P5LiA6aG55piv5a+56LGhLOWImeaMh+WumuWvueixoeeahOS4gOS4quWxnuaAp+S9nOS4uuaWh+S7tuWvueixoXVybOWxnuaAp+WAvA0KICAgICAgICAgIGZpbGVzLnB1c2godGhpcy5wYXRoVG9GaWxlKGl0ZW1bdGhpcy5maWxlS2V5XSkpDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoKQ0KICAgICAgICAgIC8vIOaVsOe7hOS4reafkOS6m+mhueeahOaVsOaNruexu+Wei+S4jeato+ehrijml6LkuI3mmK9TdHJpbmfkuZ/kuI3mmK9PYmplY3QpDQogICAgICAgICAgZXJyb3IubWVzc2FnZSA9ICdJbmNvcnJlY3QgZGF0YSB0eXBlIGZvciBzb21lIGl0ZW1zIGluIHRoZSBhcnJheSEnDQogICAgICAgICAgdGhyb3cgKGVycm9yKQ0KICAgICAgICB9DQogICAgICB9DQogICAgICByZXR1cm4gZmlsZXMNCiAgICB9LA0KDQogICAgLy8g5bey5LiK5Lyg55qE5paH5Lu25pWw6YePDQogICAgbGlzdExlbmd0aCgpIHsNCiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRMaXN0Lmxlbmd0aA0KICAgIH0sDQoNCiAgICAvLyDliJ3lp4vnmoTmlofku7bmlbDph48NCiAgICBmaWxlc0xlbmd0aCgpIHsNCiAgICAgIGNvbnNvbGUubG9nKHRoaXMuZmlsZXMpDQogICAgICByZXR1cm4gdGhpcy5maWxlcy5sZW5ndGgNCiAgICB9LA0KDQogICAgLy8g5Zu+54mH5LiK5Lyg55qE5o6l5Y+j5Zyw5Z2ADQogICAgdXBsb2FkVXJsKCkgew0KICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uIHx8IGAke3RoaXMuYmFzZVVybH1gDQogICAgfQ0KICB9LA0KICB3YXRjaDogew0KICAgIC8vIOebkeWQrOW9k+WJjeW3suS4iuS8oOaWh+S7tueahOaVsOmHj+aYr+WQpui2hei/h+mZkOWItuaVsOmHjyjmjqfliLbkuIrkvKDmjInpkq7nmoTmmL7npLrlkozpmpDol48pDQogICAgbGlzdExlbmd0aDogew0KICAgICAgaGFuZGxlcihudiwgb3YpIHsNCiAgICAgICAgaWYgKG52IDwgdGhpcy5saW1pdCkgew0KICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgIHRoaXMuc2hvd1BpY3R1cmVDYXJkVXBsb2FkKCkNCiAgICAgICAgICB9KQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICAgIHRoaXMuaGlkZVBpY3R1cmVDYXJkVXBsb2FkKCkNCiAgICAgICAgICB9KQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgaW1tZWRpYXRlOiB0cnVlLA0KICAgICAgZGVlcDogdHJ1ZQ0KICAgIH0sDQoNCiAgICAvLyDnm5HlkKznu4Tku7bliJ3lp4vmlofku7bnmoTmlbDph4/mmK/lkKbotoXov4fpmZDliLbmlbDph48o5o6n5Yi25LiK5Lyg5oyJ6ZKu55qE5pi+56S65ZKM6ZqQ6JePKQ0KICAgIGZpbGVzTGVuZ3RoOiB7DQogICAgICBoYW5kbGVyKG52LCBvdikgew0KICAgICAgICBpZiAobnYgPCB0aGlzLmxpbWl0KSB7DQogICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICAgICAgdGhpcy5zaG93UGljdHVyZUNhcmRVcGxvYWQoKQ0KICAgICAgICAgIH0pDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICAgICAgdGhpcy5oaWRlUGljdHVyZUNhcmRVcGxvYWQoKQ0KICAgICAgICAgIH0pDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICBpbW1lZGlhdGU6IHRydWUsDQogICAgICBkZWVwOiB0cnVlDQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgaGFuZGxlRXJyb3IoZXJySW5mbywgZmlsZSwgZmlsZUxpc3QpIHsNCiAgICAgIC8vIGNvbnNvbGUubG9nKGVyciwgZmlsZSwgZmlsZUxpc3QpDQogICAgICBNZXNzYWdlKHsNCiAgICAgICAgdHlwZTogJ2Vycm9yJywNCiAgICAgICAgbWVzc2FnZTogYCR7ZmlsZS5uYW1lfeS4iuS8oOWksei0pe+8jOivt+eojeWQjuWGjeivlWANCiAgICAgIH0pDQogICAgfSwNCiAgICAvLyDmn6XnnIvlt7LpgInlm77niYcNCiAgICBoYW5kbGVQaWN0dXJlQ2FyZFByZXZpZXcoZmlsZSkgew0KICAgICAgLy8g5p+l55yL5Zu+54mH55qE6Lev5b6EKGZpbGUucmVzcG9uc2XkuZ/og73mmL7npLrvvIx1cmzmmK/mlofku7bnmoTmnKzlnLDot6/lvoTvvIxyZXNwb25zZeaYr+S4iuS8oOacjeWKoeWZqOS5i+WQjuaOpeWPo+i/lOWbnueahOe6v+S4iuWcsOWdgCkNCiAgICAgIHRoaXMuZGlhbG9nSW1hZ2VVcmwgPSBmaWxlLnVybA0KICAgICAgLy8g5pi+56S65Zu+54mH5p+l55yL5qGGDQogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlDQogICAgfSwNCg0KICAgIC8vIOWIoOmZpOaWh+S7tuS5i+WJjeeahOmSqeWtkO+8jOWPguaVsOS4uuS4iuS8oOeahOaWh+S7tuWSjOaWh+S7tuWIl+ihqO+8jOiLpei/lOWbniBmYWxzZSDmiJbogIXov5Tlm54gUHJvbWlzZSDkuJTooqsgcmVqZWN077yM5YiZ5YGc5q2i5Yig6Zmk44CCDQogICAgYmVmb3JlUmVtb3ZlKGZpbGUsIGZpbGVMaXN0KSB7DQogICAgICBpZiAoZmlsZSAmJiBmaWxlLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7DQogICAgICAgIC8vIOaIkOWKn+aXtuWAmeeahOaWueazlQ0KICAgICAgICByZXR1cm4gdGhpcy4kY29uZmlybShg56Gu5a6a56e76ZmkICR7ZmlsZS5uYW1lfe+8n2ApDQogICAgICB9DQogICAgfSwNCg0KICAgIGJlZm9yZUF2YXRhclVwbG9hZChmaWxlKSB7DQogICAgICBjb25zb2xlLmxvZyhmaWxlKQ0KICAgICAgY29uc3QgaXNMdDEwTSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDw9IDEwDQoNCiAgICAgIGlmICghaXNMdDEwTSkgew0KICAgICAgICB0aGlzLiRtZXNzYWdlKHsNCiAgICAgICAgICBtZXNzYWdlOiAn5LiK5Lyg5paH5Lu25aSn5bCP5LiN6IO96LaF6L+HMTBNQiEnLA0KICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJw0KICAgICAgICB9KQ0KICAgICAgfQ0KICAgICAgcmV0dXJuIGlzTHQxME0NCiAgICB9LA0KDQogICAgLy8g5paH5Lu25YiX6KGo56e76Zmk5paH5Lu25pe255qE6ZKp5a2QDQogICAgaGFuZGxlSW1nUmVtb3ZlKGZpbGUsIGZpbGVsaXN0KSB7DQogICAgICAvLyDmm7TmlrDlt7LkuIrkvKDnmoTmlofku7bliJfooagNCiAgICAgIHRoaXMuY3VycmVudExpc3QgPSBmaWxlbGlzdA0KICAgICAgLy8g6YCa6L+H5pWw57uE5a+56LGh55qE6Z2Z5oCB5pa55rOVImZyb20i5b6X5Yiw5Ymp5L2Z5Zu+54mH55qE57q/5LiK5Zyw5Z2AKHJlc3BvbnNlKee7hOaIkOeahOaVsOe7hA0KICAgICAgbGV0IGFycmF5ID0gQXJyYXkuZnJvbShmaWxlbGlzdCwgKHsgcmVzcG9uc2UgfSkgPT4gcmVzcG9uc2UpDQogICAgICAvLyByZXNwb25zZeS4uuaOpeWPo+i/lOWbnueahOWTjeW6lOS9k+WvueixoeaXtizku47lk43lupTkvZPkuK3lj5blh7rlm77niYflnLDlnYDlho3nu4TmiJDmlbDnu4Qo6Iul5o6l5Y+j55u05o6l6L+U5Zue5Zu+54mH5Zyw5Z2A5Y+v5rOo6YeK5q2k5aSE5Luj56CBKQ0KICAgICAgYXJyYXkgPSBBcnJheS5mcm9tKGFycmF5LCAoeyBkYXRhIH0pID0+IGRhdGEpDQogICAgICAvLyBmaWxlOuWIoOmZpOeahOaWh+S7tuWvueixoTsgZmlsZWxpc3Q65Yig6Zmk5a6M5oiQ5LmL5ZCO5Ymp5LiL55qE5paH5Lu25YiX6KGoKOWIoOWujOS6huWwseaYr+S4quepuuaVsOe7hCkNCiAgICAgIHRoaXMuJGVtaXQoJ3JlbW92ZScsIGFycmF5LCBmaWxlLCBmaWxlbGlzdCkNCiAgICAgIC8vIOWQjOaXtuinpuWPkeiHquWumuS5ieeahGNoYW5nZeS6i+S7tg0KICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgYXJyYXksIGZpbGUsIGZpbGVsaXN0KQ0KICAgIH0sDQoNCiAgICAvLyDkuIrkvKDmiJDlip8NCiAgICB1cGxvYWRTdWNjZXNzKHJlcywgZmlsZSwgZmlsZWxpc3QpIHsNCiAgICAgIC8vIOabtOaWsOW3suS4iuS8oOeahOaWh+S7tuWIl+ihqA0KICAgICAgdGhpcy5jdXJyZW50TGlzdCA9IGZpbGVsaXN0DQogICAgICAvLyDpgJrov4fmlbDnu4Tlr7nosaHnmoTpnZnmgIHmlrnms5UiZnJvbSLlvpfliLDmiYDmnInlm77niYfnmoTnur/kuIrlnLDlnYAocmVzcG9uc2Up57uE5oiQ55qE5pWw57uEDQogICAgICBsZXQgYXJyYXkgPSBBcnJheS5mcm9tKGZpbGVsaXN0LCAoeyByZXNwb25zZSB9KSA9PiByZXNwb25zZSkNCiAgICAgIC8vIHJlc3BvbnNl5Li65o6l5Y+j6L+U5Zue55qE5ZON5bqU5L2T5a+56LGh5pe2LOS7juWTjeW6lOS9k+S4reWPluWHuuWbvueJh+WcsOWdgOWGjee7hOaIkOaVsOe7hCjoi6XmjqXlj6Pnm7TmjqXov5Tlm57lm77niYflnLDlnYDlj6/ms6jph4rmraTlpITku6PnoIEpDQogICAgICBhcnJheSA9IEFycmF5LmZyb20oYXJyYXksIChyZXNwb25zZSkgPT4gcmVzcG9uc2U/LmRhdGEpDQogICAgICAvLyByZXM65ZCO56uv5o6l5Y+j55qE6L+U5Zue5YC8OyBmaWxlOuS4iuS8oOeahOaWh+S7tuWvueixoTsgZmlsZWxpc3Q65LiK5Lyg5a6M5oiQ5LmL5ZCO55qE5paH5Lu25YiX6KGoDQogICAgICB0aGlzLiRlbWl0KCdzdWNjZXNzJywgYXJyYXksIHJlcywgZmlsZSwgZmlsZWxpc3QpDQogICAgICAvLyDlkIzml7bop6blj5Hoh6rlrprkuYnnmoRjaGFuZ2Xkuovku7YNCiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIGFycmF5LCBmaWxlLCBmaWxlbGlzdCkNCiAgICB9LA0KDQogICAgLy8g5paH5Lu254q25oCB5pS55Y+Y5pe255qE6ZKp5a2Q77yM5re75Yqg5paH5Lu244CB5LiK5Lyg5oiQ5Yqf5ZKM5LiK5Lyg5aSx6LSl5pe26YO95Lya6KKr6LCD55SoDQogICAgY2hhbmdlKGZpbGUsIGZpbGVsaXN0KSB7DQogICAgICAvLyBjb25zb2xlLmxvZyhmaWxlLCBmaWxlbGlzdCkNCiAgICB9LA0KDQogICAgLy8g5LiK5Lyg5paH5Lu26LaF5Ye65Liq5pWw6ZmQ5Yi25pe255qE6ZKp5a2QDQogICAgZXhjZWVkKGZpbGVzLCBmaWxlbGlzdCkgew0KICAgICAgdGhpcy4kbWVzc2FnZS53YXJuaW5nKGDmnIDlpJrkuIrkvKAke3RoaXMubGltaXR95byg5Zu+54mHYCkNCiAgICB9LA0KDQogICAgLy8g6ZqQ6JeP5LiK5Lyg5oyJ6ZKuDQogICAgaGlkZVBpY3R1cmVDYXJkVXBsb2FkKCkgew0KICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLiRyZWZzLmltYWdlVXBsb2FkLiRlbC5jaGlsZE5vZGVzDQogICAgICBjb25zdCBsZW5ndGggPSBub2Rlcy5sZW5ndGgNCiAgICAgIG5vZGVzW2xlbmd0aCAtIDFdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScNCiAgICB9LA0KDQogICAgLy8g5pi+56S65LiK5Lyg5oyJ6ZKuDQogICAgc2hvd1BpY3R1cmVDYXJkVXBsb2FkKCkgew0KICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLiRyZWZzLmltYWdlVXBsb2FkLiRlbC5jaGlsZE5vZGVzDQogICAgICBjb25zdCBsZW5ndGggPSBub2Rlcy5sZW5ndGgNCiAgICAgIG5vZGVzW2xlbmd0aCAtIDFdLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWZsZXgnDQogICAgfSwNCg0KICAgIC8vIOWwhuaWh+S7tui3r+W+hOWtl+espuS4sui9rOS4uuaWh+S7tuWvueixoQ0KICAgIHBhdGhUb0ZpbGUoc3RyKSB7DQogICAgICBsZXQgZmlsZSA9IHt9DQogICAgICAvLyDkvb/nlKhsb2Rhc2guanPmj5DkvpvnmoTmlrnms5Xojrflj5bmlofku7blkI0NCiAgICAgIGNvbnN0IGZpbGVGdWxsTmFtZSA9IG50aChzcGxpdChzdHIsICcvJyksIC0xKQ0KICAgICAgLy8g5Y+N6Kej5p6Q5paH5Lu25ZCNDQogICAgICBsZXQgZmlsZU5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQobnRoKHNwbGl0KGZpbGVGdWxsTmFtZSwgJy4nKSkpDQogICAgICBmaWxlTmFtZSA9IGZpbGVOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChgXiR7dGhpcy5kYXRhLnByZUZpeH1cL1swLTldezEzfWApLCAnJykNCiAgICAgIC8vIOaIquWPluaWh+S7tuWQjue8gA0KICAgICAgY29uc3QgZmlsZVN1ZmZpeCA9IG50aChzcGxpdChmaWxlRnVsbE5hbWUsICcuJyksIC0xKQ0KICAgICAgZmlsZSA9IHsNCiAgICAgICAgdXJsOiBzdHIsDQogICAgICAgIHJlc3BvbnNlOiB7ICdkYXRhJzogeyBuYW1lOiBmaWxlTmFtZSwgdXJsOiBzdHIgfX0sDQogICAgICAgIG5hbWU6IGAke2ZpbGVOYW1lfS4ke2ZpbGVTdWZmaXh9YCwNCiAgICAgICAgc3RhdHVzOiAnc3VjY2VzcycNCiAgICAgIH0NCiAgICAgIHJldHVybiBmaWxlDQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA8CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/GlobalComponents/ImageUpload","sourcesContent":["<template>\r\n  <!-- 图片上传组件 -->\r\n  <div class=\"custom-upload-images\">\r\n    <el-upload\r\n      ref=\"imageUpload\"\r\n      :action=\"uploadUrl\"\r\n      :on-preview=\"handlePictureCardPreview\"\r\n      :before-remove=\"beforeRemove\"\r\n      :on-remove=\"(file,filelist)=>{return handleImgRemove(file,filelist)}\"\r\n      :on-success=\"(res,file,filelist)=>{return uploadSuccess(res,file,filelist)}\"\r\n      :on-exceed=\"exceed\"\r\n      :on-change=\"change\"\r\n      :on-error=\"handleError\"\r\n      :limit=\"limit\"\r\n      :disabled=\"disabled\"\r\n      :multiple=\"multiple\"\r\n      :accept=\"accept\"\r\n      :show-file-list=\"showFileList\"\r\n      :data=\"data\"\r\n      :style=\"{\r\n        '--width': width,\r\n        '--height': height,\r\n        '--margin': margin\r\n      }\"\r\n      :file-list=\"files\"\r\n      :headers=\"headers\"\r\n      list-type=\"picture-card\"\r\n      :before-upload=\"beforeAvatarUpload\"\r\n    >\r\n      <i class=\"el-icon-plus\" />\r\n    </el-upload>\r\n    <el-dialog\r\n      :visible.sync=\"dialogVisible\"\r\n      :append-to-body=\"true\"\r\n    >\r\n      <img\r\n        :src=\"dialogImageUrl\"\r\n        width=\"100%\"\r\n        alt=\"图片获取失败...\"\r\n        class=\"visibleImg\"\r\n      >\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getToken } from '@/utils/auth'\r\nimport nth from 'lodash/nth'\r\nimport split from 'lodash/split'\r\nimport { Message } from 'element-ui'\r\n\r\nexport default {\r\n  props: {\r\n    // 图片上传的接口地址\r\n    action: {\r\n      type: String,\r\n      default: process.env.VUE_APP_BASE_API + '/huawei/uploadFile'\r\n    },\r\n    // 组件是否可编辑\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n\r\n    // 组件是否支持多选上传(默认不支持)\r\n    multiple: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n\r\n    // 上传图片的数量限制\r\n    limit: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n\r\n    // 允许上传的文件类型\r\n    accept: {\r\n      type: String,\r\n      default: '.jpg,.png,.jpeg'\r\n    },\r\n\r\n    // 上传按钮的宽度\r\n    width: {\r\n      type: String,\r\n      default: '100px'\r\n    },\r\n\r\n    // 上传按钮的高度\r\n    height: {\r\n      type: String,\r\n      default: '100px'\r\n    },\r\n\r\n    // 文件缩略图列表(该数组的每一项只能是字符串或者对象)\r\n    fileList: {\r\n      type: [Array, String],\r\n      default() {\r\n        return []\r\n      }\r\n    },\r\n\r\n    // 如果fileList有数组项是对象则指定对象的一个属性作为文件对象url属性值(默认是该对象的url属性表示文件路径)\r\n    fileKey: {\r\n      type: String,\r\n      default: 'url'\r\n    },\r\n\r\n    // 组件每张图片的margin值\r\n    margin: {\r\n      type: String,\r\n      default: '0px 8px 8px 0px'\r\n    },\r\n\r\n    showFileList: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n\r\n    // 上传额外带的参数\r\n    data: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          'priFix': 'adminImage'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      baseUrl: process.env.VUE_APP_IMAGE_URL,\r\n      headers: {\r\n        'token': getToken()\r\n      }, // 上传的请求头部\r\n      dialogImageUrl: '', // 当前查看图片的路径\r\n      dialogVisible: false, // 图片查看框的显示状态\r\n      currentList: [] // 已上传的文件\r\n    }\r\n  },\r\n  computed: {\r\n    // 计算组件需要展示的文件缩略图列表数据\r\n    files() {\r\n      // 缩略图列表\r\n      const files = []\r\n\r\n      // 如果父组件没有传入缩略图列表数据\r\n      if (this.fileList.length === 0) {\r\n        return []\r\n      }\r\n\r\n      // 如果父组件没有传入缩略图列表数据\r\n      if (typeof (this.fileList) === 'string' && this.fileList === '') {\r\n        return []\r\n      }\r\n\r\n      // 若父组件传入了一个字符串作为缩略图列表的显示数据\r\n      if (typeof (this.fileList) === 'string') {\r\n        // 判断该字符串是否是由多张图片的地址拼接而成\r\n        if (this.fileList.includes(',')) {\r\n          const fileList = this.fileList.split(',')\r\n          for (const file of fileList) {\r\n            files.push(this.pathToFile(file))\r\n          }\r\n          return files\r\n        } else {\r\n          // 将其作为数组项加入数组并直接返回结果\r\n          files.push(this.pathToFile(this.fileList))\r\n          return files\r\n        }\r\n      }\r\n\r\n      // 若父组件传入缩略图列表的显示数据是一个数组\r\n      for (let item of this.fileList) {\r\n        // 判断传入的数组每一项是否是一个字符串\r\n        if (typeof (item) === 'string') {\r\n          // 将字符串转成数组(处理/单个数组项/为多张图片的地址拼接,并以逗号分隔的字符串/的情况)\r\n          item = item.split(',')\r\n          for (const file of item) {\r\n            files.push(this.pathToFile(file))\r\n          }\r\n        } else if (typeof (item) === 'object') {\r\n          // 如果数组的每一项是对象,则指定对象的一个属性作为文件对象url属性值\r\n          files.push(this.pathToFile(item[this.fileKey]))\r\n        } else {\r\n          const error = new Error()\r\n          // 数组中某些项的数据类型不正确(既不是String也不是Object)\r\n          error.message = 'Incorrect data type for some items in the array!'\r\n          throw (error)\r\n        }\r\n      }\r\n      return files\r\n    },\r\n\r\n    // 已上传的文件数量\r\n    listLength() {\r\n      return this.currentList.length\r\n    },\r\n\r\n    // 初始的文件数量\r\n    filesLength() {\r\n      console.log(this.files)\r\n      return this.files.length\r\n    },\r\n\r\n    // 图片上传的接口地址\r\n    uploadUrl() {\r\n      return this.action || `${this.baseUrl}`\r\n    }\r\n  },\r\n  watch: {\r\n    // 监听当前已上传文件的数量是否超过限制数量(控制上传按钮的显示和隐藏)\r\n    listLength: {\r\n      handler(nv, ov) {\r\n        if (nv < this.limit) {\r\n          this.$nextTick(() => {\r\n            this.showPictureCardUpload()\r\n          })\r\n        } else {\r\n          this.$nextTick(() => {\r\n            this.hidePictureCardUpload()\r\n          })\r\n        }\r\n      },\r\n      immediate: true,\r\n      deep: true\r\n    },\r\n\r\n    // 监听组件初始文件的数量是否超过限制数量(控制上传按钮的显示和隐藏)\r\n    filesLength: {\r\n      handler(nv, ov) {\r\n        if (nv < this.limit) {\r\n          this.$nextTick(() => {\r\n            this.showPictureCardUpload()\r\n          })\r\n        } else {\r\n          this.$nextTick(() => {\r\n            this.hidePictureCardUpload()\r\n          })\r\n        }\r\n      },\r\n      immediate: true,\r\n      deep: true\r\n    }\r\n  },\r\n  methods: {\r\n    handleError(errInfo, file, fileList) {\r\n      // console.log(err, file, fileList)\r\n      Message({\r\n        type: 'error',\r\n        message: `${file.name}上传失败，请稍后再试`\r\n      })\r\n    },\r\n    // 查看已选图片\r\n    handlePictureCardPreview(file) {\r\n      // 查看图片的路径(file.response也能显示，url是文件的本地路径，response是上传服务器之后接口返回的线上地址)\r\n      this.dialogImageUrl = file.url\r\n      // 显示图片查看框\r\n      this.dialogVisible = true\r\n    },\r\n\r\n    // 删除文件之前的钩子，参数为上传的文件和文件列表，若返回 false 或者返回 Promise 且被 reject，则停止删除。\r\n    beforeRemove(file, fileList) {\r\n      if (file && file.status === 'success') {\r\n        // 成功时候的方法\r\n        return this.$confirm(`确定移除 ${file.name}？`)\r\n      }\r\n    },\r\n\r\n    beforeAvatarUpload(file) {\r\n      console.log(file)\r\n      const isLt10M = file.size / 1024 / 1024 <= 10\r\n\r\n      if (!isLt10M) {\r\n        this.$message({\r\n          message: '上传文件大小不能超过10MB!',\r\n          type: 'warning'\r\n        })\r\n      }\r\n      return isLt10M\r\n    },\r\n\r\n    // 文件列表移除文件时的钩子\r\n    handleImgRemove(file, filelist) {\r\n      // 更新已上传的文件列表\r\n      this.currentList = filelist\r\n      // 通过数组对象的静态方法\"from\"得到剩余图片的线上地址(response)组成的数组\r\n      let array = Array.from(filelist, ({ response }) => response)\r\n      // response为接口返回的响应体对象时,从响应体中取出图片地址再组成数组(若接口直接返回图片地址可注释此处代码)\r\n      array = Array.from(array, ({ data }) => data)\r\n      // file:删除的文件对象; filelist:删除完成之后剩下的文件列表(删完了就是个空数组)\r\n      this.$emit('remove', array, file, filelist)\r\n      // 同时触发自定义的change事件\r\n      this.$emit('change', array, file, filelist)\r\n    },\r\n\r\n    // 上传成功\r\n    uploadSuccess(res, file, filelist) {\r\n      // 更新已上传的文件列表\r\n      this.currentList = filelist\r\n      // 通过数组对象的静态方法\"from\"得到所有图片的线上地址(response)组成的数组\r\n      let array = Array.from(filelist, ({ response }) => response)\r\n      // response为接口返回的响应体对象时,从响应体中取出图片地址再组成数组(若接口直接返回图片地址可注释此处代码)\r\n      array = Array.from(array, (response) => response?.data)\r\n      // res:后端接口的返回值; file:上传的文件对象; filelist:上传完成之后的文件列表\r\n      this.$emit('success', array, res, file, filelist)\r\n      // 同时触发自定义的change事件\r\n      this.$emit('change', array, file, filelist)\r\n    },\r\n\r\n    // 文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用\r\n    change(file, filelist) {\r\n      // console.log(file, filelist)\r\n    },\r\n\r\n    // 上传文件超出个数限制时的钩子\r\n    exceed(files, filelist) {\r\n      this.$message.warning(`最多上传${this.limit}张图片`)\r\n    },\r\n\r\n    // 隐藏上传按钮\r\n    hidePictureCardUpload() {\r\n      const nodes = this.$refs.imageUpload.$el.childNodes\r\n      const length = nodes.length\r\n      nodes[length - 1].style.display = 'none'\r\n    },\r\n\r\n    // 显示上传按钮\r\n    showPictureCardUpload() {\r\n      const nodes = this.$refs.imageUpload.$el.childNodes\r\n      const length = nodes.length\r\n      nodes[length - 1].style.display = 'inline-flex'\r\n    },\r\n\r\n    // 将文件路径字符串转为文件对象\r\n    pathToFile(str) {\r\n      let file = {}\r\n      // 使用lodash.js提供的方法获取文件名\r\n      const fileFullName = nth(split(str, '/'), -1)\r\n      // 反解析文件名\r\n      let fileName = decodeURIComponent(nth(split(fileFullName, '.')))\r\n      fileName = fileName.replace(new RegExp(`^${this.data.preFix}\\/[0-9]{13}`), '')\r\n      // 截取文件后缀\r\n      const fileSuffix = nth(split(fileFullName, '.'), -1)\r\n      file = {\r\n        url: str,\r\n        response: { 'data': { name: fileName, url: str }},\r\n        name: `${fileName}.${fileSuffix}`,\r\n        status: 'success'\r\n      }\r\n      return file\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped deep>\r\n  .custom-upload-images {\r\n\r\n    ::v-deep .el-upload {\r\n      justify-content: center;\r\n      align-items: center;\r\n      width: var(--width);\r\n      height: var(--height);\r\n      line-height: var(--height);\r\n      box-sizing: border-box;\r\n      margin: var(--margin);\r\n    }\r\n\r\n    ::v-deep .el-upload-list__item {\r\n      width: var(--width);\r\n      height: var(--height);\r\n      line-height: var(--height);\r\n    }\r\n\r\n    /* -- 上传成功后右上角小图标样式(status-label-start) -- */\r\n    .el-upload-list__item-status-label {\r\n      position: relative;\r\n    }\r\n\r\n    ::v-deep.el-icon-upload-success {\r\n      position: absolute;\r\n      top: 0%;\r\n      left: 40%;\r\n      transform: rotate(-45deg);\r\n    }\r\n    /* -- status-label-end -- */\r\n\r\n    .visibleImg {\r\n      font-size: 16px;\r\n      color: #999999;\r\n    }\r\n  }\r\n</style>\r\n"]}]}